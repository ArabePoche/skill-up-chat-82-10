/**
 * Hook pour mettre à jour une soumission d'exercice existante
 */
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

export const useUpdateExerciseSubmission = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ 
      messageId, 
      content, 
      file 
    }: {
      messageId: string;
      content: string;
      file?: File;
    }) => {
      let fileUrl: string | undefined;
      let fileType: string | undefined;
      let fileName: string | undefined;

      // Upload du fichier si présent
      if (file) {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) throw new Error('User not authenticated');
        
        const fileExt = file.name.split('.').pop();
        const filePath = `${user.id}/${Date.now()}.${fileExt}`;
        
        const { error: uploadError } = await supabase.storage
          .from('lesson_discussion_files')
          .upload(filePath, file);

        if (uploadError) throw uploadError;

        const { data: { publicUrl } } = supabase.storage
          .from('lesson_discussion_files')
          .getPublicUrl(filePath);

        fileUrl = publicUrl;
        fileType = file.type;
        fileName = file.name;
      }

      // Mise à jour de la soumission de l'élève uniquement
      // Ne pas toucher au commentaire du prof (rejection_reason, etc.)
      const updateData: any = { 
        content,
        exercise_status: 'pending', // Repasser en attente après modification
        updated_at: new Date().toISOString()
      };
      
      if (fileUrl) {
        updateData.file_url = fileUrl;
        updateData.file_type = fileType;
        updateData.file_name = fileName;
        updateData.message_type = 'file';
      }

      const { data, error } = await supabase
        .from('lesson_messages')
        .update(updateData)
        .eq('id', messageId)
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: (data) => {
      toast.success('Soumission mise à jour avec succès');
      
      // Invalider les queries pertinentes
      queryClient.invalidateQueries({ queryKey: ['lesson-messages'] });
      queryClient.invalidateQueries({ queryKey: ['promotion-messages'] });
      queryClient.invalidateQueries({ queryKey: ['teacher-messages'] });
    },
    onError: (error: any) => {
      console.error('Erreur lors de la mise à jour:', error);
      toast.error('Erreur lors de la mise à jour de la soumission');
    },
  });
};
